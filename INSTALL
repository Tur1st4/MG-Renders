#!/bin/bash

# Autor          :        Paulo Jacob [ Tur1st4 ]
# Descrição      :        Criar as pastas necessárias para o download de suas buscas no site MG-Renders.net
# Versão         :        0.4
# Licença        :        MIT License

#===============| CHAMANDO ARQUIVOS EXTERNOS |================#

source "conf/conf.conf"

#===============| VARIÁVEIS GLOBAIS |=========================#

readonly pasta_exec="Execucoes"
readonly _pastas=("Criando a pasta Execuções..." "Criando a pasta Principal..." "Criando a pasta Loop........") # Avisos ao usuário

#===============| FUNÇÕES |===================================#

function _ctrl_c(){ # Caso o usuário aperte ctrl-c
    echo -e "\n\nVocê apertou$verm_n Ctrl+C$res.\nEntão sou obrigado a parar ;-;\n"
    setterm -cursor on # O cursor é desligado no inicío do programa. Caso o programa seja encerrado inesperadamente, a função ctrl-c deve retorná-lo

    exit 127
}

function _verificacao(){ # Verificando se os diretórios necessários ao programa existem
    [[ ! -d "$pasta_exec" ]]           && { echo -ne "$branc_n >$res ${_pastas[0]}"; mkdir "$pasta_exec"; sleep 2s; echo -e "$verde_n [ok]$res\n";}
    [[ ! -d "$pasta_exec/Principal" ]] && { echo -ne "$branc_n >$res ${_pastas[1]}"; mkdir "$pasta_exec/Principal"; sleep 2s;  echo -e "$verde_n [ok]$res\n";}
    [[ ! -d "$pasta_exec/Loop" ]]      && { echo -ne "$branc_n >$res ${_pastas[2]}"; mkdir "$pasta_exec/Loop"; sleep 2s;  echo -e "$verde_n [ok]$res\n";}

}

function _local_save(){ # Definindo o diretório onde os renders ficarão
    read -p $'\n\n\e[01;32m >\e[m Coloque o local onde deseja salvar seus renders: ' LOC

    _check_save
}


function _check_save(){ # Checando se o diretório passado pelo o usuário existe
    if [[ -d $LOC ]]; then
        echo "$LOC" > Execucoes/save.tur1st4
    else
        [[ ! $LOC ]] && { clear; echo -e "\n\n$verm_n <$res A entrada de dados não pode ser vazia $verm_n> $res"; _local_save;}
	clear
        echo -e "\n\n$verm_n <$res O local não existe. Cheque se você escreveu corretamente. $verm_n> $res"

	_local_save
    fi
}

#===============================================================#

#========================| INICIALIZAR |========================#

clear

trap _ctrl_c SIGINT SIGTERM

setterm -cursor off # Desligando o cursor

cat <<DES

		INSTALADOR MG-PROJECT :~
	=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

	 O script criará as seguintes pastas:
	  ->/Execucoes
	  ->/Execucoes/Principal
	  ->/Execucoes/Seds
	  ->/Execucoes/Loop

	 Depois dessa etapa, será perguntado on-
	de você gostaria de salvar seus renders.
	Lembre-se, coloque o caminho completo:
	 EX:
	  Windows:
	   -> /mnt/c/Users/Tur1st4/Downloads/Img
	  Linux:
	   -> /home/tur1st4/Downloads/Img

	 Terminando todos os processos, execute
	o 'main.sh' que está nessa pasta, com o
	comando:
	   -> ./main.sh

	=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

DES

while true; do
    read -p $'\e[01;37m \bDeseja começar a instalação? [S/N]\e[m ' INS

    if [[ "$INS" =~ ^(S|s|sim|Sim|SIM)$ ]]; then
        echo -ne "\nPreparando instalação"

        contador=0

        while ((contador<3)); do
	    echo -ne "$verde_n.$res"
	    sleep 0.8s
	    ((contador++))
        done

        break
    elif [[ "$INS" =~ ^(N|n|nao|não|Não|Nao|NAO|NÃO)$ ]]; then
        clear
        echo -e "\n$verm_n \bVocê cancelou$res ._.\n"
        setterm -cursor on

        exit 1
    else
    	echo -e "\nOpção inválida\n"
    fi
done

clear

_verificacao

echo -ne "Preparando a segunda etapa"

contador=0

while ((contador<3)); do
    echo -ne "$verde_n.$res"
    sleep 0.8s
    ((contador++))
done

clear

_local_save

echo -e "\n$verde_n    >$res Local salvo com sucesso!$verde_n <$res\n\n"

chmod +x Sed/*

contador=3

echo -ne "Saindo do instalador em $contador"

while ((contador>=0)); do
    echo -ne "$verm_n\b$contador$res"

    sleep 1s
    ((contador--))
done

clear

echo -e "\n\n$verde_n \bInstalação concluída com êxito!$res\n\n"

setterm -cursor on
